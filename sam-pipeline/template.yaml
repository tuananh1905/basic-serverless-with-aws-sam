AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-pipeline

  Sample SAM Template for sam-pipeline

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 256

Parameters:
  StageName:
    Type: String
    Description: Stage name
    Default: prod

Resources:
  # myAPI:
  #   Type: AWS::Serverless::Api
  #   Description: Main API
  #   Properties:
  #     StageName: !Sub ${StageName}
  #     Cors:
  #       AllowMethods: "'GET, OPTIONS'"
  #       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #       AllowOrigin: "'*'"
  #       MaxAge: "'500'"
  #     Auth:
  #       AddDefaultAuthorizerToCorsPreflight: false
  #       DefaultAuthorizer: MyCognitoAuthorizer
  #       Authorizers:
  #         MyCognitoAuthorizer:
  #           UserPoolArn: arn:aws:cognito-idp:ap-southeast-1:014183400304:userpool/ap-southeast-1_lRaRDCnnI

  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: hello_world
  #     Handler: app.lambda_handler
  #     Runtime: python3.8
  #     Architectures:
  #       - x86_64
  #     Events:
  #       HelloWorld:
  #         Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           # Path: !Join ["/", [!Ref "AWS::StackName", "hello"]]
  #           # Path: /stag/hello/
  #           # Path: !Join ["", ["/", !Ref "AWS::StackName", "/", "hello", "/"]]
  #           # Path: !Sub "/${StageName}/hello"
  #           # Path: !Sub
  #           #   - /${StackName}/hello
  #           #   - StackName: !Ref "AWS::StackName"
  #           ApiId: !Ref AppApi
  #           Path: hello/
  #           Method: get
  # AdminTest:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: hello_world
  #     Handler: app.lambda_handler
  #     Runtime: python3.8
  #     Architectures:
  #       - x86_64
  #     Events:
  #       GetAdminEndpoint:
  #         Type: Api
  #         Properties:
  #           Path: /admin-only
  #           Method: GET
  #           # RestApiId: !Ref MyApi
  #           Auth:
  #             DefaultAuthorizer: MyCognitoAuthorizer
  #             Authorizers:
  #               MyCognitoAuthorizer:
  #                 UserPoolArn: !GetAtt InfrastructureStack.Outputs.CognitoUserPoolArn
  #                 Identity:
  #                   Header: Authorization
  #                   ValidationExpression: '^Bearer [-0-9a-zA-Z\._]*$'
  #                   ReauthorizeEvery: 300
  #             ResourcePolicy:
  #               CustomStatements:
  #                 - Effect: "Deny"
  #                   Action: "execute-api:Invoke"
  #                   Resource: "execute-api:/*/*/*/admin-only"
  #                   Condition:
  #                     StringNotEquals:
  #                       cognito:preferred_role: !GetAtt InfrastructureStack.Outputs.CognitoAdminGroupArn

  AppApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: cognito-restapi
      Description: Cognito User Pools Authorizer REST API demo

  # GET Method with Cognito User Pools Authorizer enabled
  RootMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AppApi
      ResourceId: !GetAtt AppApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref AuthorizersCognitoUserPools
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          !Join [
            "",
            [
              "arn:aws:apigateway:",
              !Ref AWS::Region,
              ":lambda:path/2015-03-31/functions/",
              !GetAtt AppFunction.Arn,
              "/invocations",
            ],
          ]

  # Cognito User Pools Authorizer
  AuthorizersCognitoUserPools:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref AppApi
      IdentitySource: method.request.header.authorizationToken
      ProviderARNs:
        - !GetAtt InfrastructureStack.Outputs.CognitoUserPoolArn

  # Dummy function
  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler

  # Permission to allow Lambda invocation from API Gateway
  AppFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AppFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AppApi}/*/GET/

  InfrastructureStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./infrastructure/infrastructure.yaml
      Parameters:
        TableName: !Sub "${StageName}-nguyen-tran-clinic"
        StageName: !Sub ${StageName}
        AppName: "dmcs"
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootMethodGet
    Properties:
      RestApiId: !Ref AppApi

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Sub ${StageName}
      RestApiId: !Ref AppApi
      DeploymentId: !Ref Deployment
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/hello/"
  # HelloWorldFunction:
  #   Description: "Hello World Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn
  AppApiEndpoint:
    Description: API Endpoint
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${AWS::StackName}"
